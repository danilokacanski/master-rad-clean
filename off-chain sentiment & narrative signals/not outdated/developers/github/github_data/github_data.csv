sha,author,date,message
5b2fc67eeef09b76a93dab3d93b15b725aaf1259,kevaundray,2025-08-18T12:42:22Z,"core/rawdb: add non-unix alternative for tablewriter (#32455)

Continuation of https://github.com/ethereum/go-ethereum/issues/32022

tablewriter assumes unix or windows, which may not be the case for
embedded targets.

For v0.0.5 of tablewriter, it is noted in table.go: ""The protocols were
written in pure Go and works on windows and unix systems""

---------

Co-authored-by: rjl493456442 <garyrong0905@gmail.com>"
85077be58edea572f29c3b1a6a055077f1a56a8b,kevaundray,2025-08-18T06:15:48Z,metrics: add tinygo build flag for CPU time (#32454)
a9a19c4202161347559d30f295fc268e18a4a089,jwasinger,2025-08-15T13:58:00Z,"core/vm: fix EIP-7823 modexp input length check (#32363)

The order of the checks was wrong which would have allowed a call to
modexp with `baseLen == 0 && modLen == 0` post fusaka.

Also handles an edge case where base/mod/exp length >= 2**64

---------

Co-authored-by: Felix Lange <fjl@twurst.com>"
1693a48f8cf227f77c66457261a5a53938221ce7,Felix Lange,2025-08-15T12:08:27Z,"rlp: remove workaround for Value.Bytes (#32433)

As of Go 1.19, it is permitted to call Bytes() on a reflect.Value
representing an adressable byte array. So we can remove our workaround,
undoing #22924.

https://go.dev/doc/go1.19#reflectpkgreflect

> The method [Value.Bytes](https://go.dev/pkg/reflect/#Value.Bytes) now
accepts addressable arrays in addition to slices."
1d29e3ec0ed0afc7c2cc7ebe2b4b694cc5485b9a,Felix Lange,2025-08-15T12:07:27Z,"consensus/misc/eip4844: use blob parameters of current header (#32424)

This changes the implementation to resolve the blob parameters according
to the current header timestamp. This matters for EIP-7918, where we
would previously resolve the UpdateFraction according to the parent
header fork, leading to a confusing situation at the fork transition
block.

---------

Co-authored-by: MariusVanDerWijden <m.vanderwijden@live.de>"
88922d2bf5fc33b29ecc87b186d7d673264f1ef6,cui,2025-08-15T07:12:22Z,crypto/bn256: refactor to use bitutil.TestBytes (#32435)
ccf684f1bae5cc542d49fb5b46e296b6e465d9ca,cui,2025-08-15T07:10:44Z,core/vm: refactor to use bitutil.TestBytes (#32434)
a002a6c03f1990feebfa90da9d0e678a623c228f,Guillaume Ballet,2025-08-15T06:58:24Z,"cmd/evm: use PathScheme in blockrunner (#32444)

This is a preparatory change for Verkle/binary trees, since they don't
support the hash-based database scheme. This has no impact on the MPT."
ea3a71792da3c883d6806e350cf34d795a253913,Guillaume Ballet,2025-08-15T06:34:32Z,"trie, core/state: add the transition tree (verkle transition part 2) (#32366)

This add some of the changes that were missing from #31634. It
introduces the `TransitionTrie`, which is a façade pattern between the
current MPT trie and the overlay tree.

---------

Signed-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>
Co-authored-by: rjl493456442 <garyrong0905@gmail.com>"
2dbb580f51b61d7ff78fceb44b06835827704110,cui,2025-08-14T12:47:43Z,build: remove unused functions (#32393)
e798e26c69dde8405280de92dd076ca7dde254a3,cui,2025-08-14T12:32:45Z,crypto/secp256k1: use ReadBits from common/math (#32430)
25cce4dfe469113bd6020c6b32f02cdd0d3d6630,levisyin,2025-08-14T11:24:47Z,build: upgrade -dlgo version to Go 1.25.0 (#32412)
b00b6fe2345112c05b733ac8cacf417fb686cd04,Felix Lange,2025-08-14T11:07:20Z,.github: upgrade workflows to Go 1.25 (#32425)
2b38daa48c92947a03830ee9d4319328bc710f4e,cui,2025-08-14T08:28:57Z,p2p: refactor to use time.Now().UnixMilli() in golang std lib (#32402)
3ff99ae52c420477020ae957a61c5c216ac7e7f5,Marius van der Wijden,2025-08-13T15:12:08Z,"eth/syncer: fix typo (#32427)

avaibale -> available"
51342136fadf2972320cd70badb1336efe3259e1,Nebojsa Urosevic,2025-08-13T11:51:38Z,"eth/tracers: Adds codeHash to prestateTracer's response (#32391)

**Problem:** Including full account code in prestateTracer response
significantly increases response payload size.

**Solution:** Add codeHash field to the response. This will allow
client-side bytecode caching and is a non-breaking change.

**Note:** codeHash for EoAs is excluded to save space.

---------

Co-authored-by: Sina Mahmoodi <itz.s1na@gmail.com>"
f054befc5511de8d252d8fb6ecd847471d4c2c00,cui,2025-08-13T10:00:54Z,"rlp: optimize intsize (#32421)

goos: darwin
goarch: arm64
pkg: github.com/ethereum/go-ethereum/rlp
cpu: Apple M4
        │   old.txt   │               new.txt               │
        │   sec/op    │   sec/op     vs base                │
Intsize   2.175n ± 5%   1.050n ± 4%  -51.76% (p=0.000 n=10)"
a4d3fb98059fc0c0fc13bdb04d3788f691829b2c,cui,2025-08-13T07:08:23Z,node: remove unused err var (#32398)
75fc56f27d5b460f396f6db06f65221cbd0c9ff2,Klimov Sergei,2025-08-13T07:02:50Z,eth: abort `requiredBlocks` check if peer handler terminated (#32413)
56edd21453bf9f055202a7bd8c56aa36aa87dab0,youzichuan,2025-08-12T17:37:09Z,"cmd: fix inconsistent function name in comment (#32411)

fix inconsistent function name in comment

Signed-off-by: youzichuan <youzichuan6@outlook.com>"
43b2aac33c6c464cd30e5886a5ef8521122ad295,cui,2025-08-12T13:47:18Z,trie: refactor to use slices.Concat (#32401)
2e9c9b5e981595a24ac75baae64999b86060b5bd,Rizky Ikwan,2025-08-12T12:11:18Z,"consensus: fix ambiguous invalid gas limit error (#32405)

## Description

Correct symmetric tolerance in gas limit validation:
Replace ambiguous ""+-="" with standard ""+/-"" in the error message.
Logic rejects when |header − parent| ≥ limit, so allowed range is |Δ| ≤
limit − 1.

No logic or functionality has been modified."
cbbf686ecc9e99f91886251f463dcea953913e1d,rjl493456442,2025-08-11T13:55:38Z,"trie, core: rework tracer and track origin value of dirty nodes (#32306)

These changes made in the PR should be highlighted here

The trie tracer is split into two distinct structs: opTracer and prevalueTracer. 
The former is specific to MPT, while the latter is generic and applicable to all
trie implementations.

The original values of dirty nodes are tracked in a NodeSet. This serves
as the foundation for both full archive node implementations and the state live
tracer."
55a471efaf6f0c3ac093c0923ffa089df438ece9,Forostovec,2025-08-11T13:34:59Z,"eth/downloader: skip nil peer in GetHeader (#32369)

The GetHeader function was incorrectly returning an error when
encountering nil peers in the peers list, which contradicted the comment 
""keep retrying if none are yet available"". 

Changed the logic to skip nil peers with 'continue' instead of returning
an error, allowing the function to properly iterate through all
available peers and attempt to retrieve the target header from each valid peer.

This ensures the function behaves as intended - trying all available
peers before giving up, rather than failing on the first nil peer encountered."
92106a6b17a2082caad94cecb96ca371d2cf4356,cui,2025-08-11T12:24:55Z,"accounts/abi, accounts/keystore: use reflect.TypeFor (#32323)


Co-authored-by: Felix Lange <fjl@twurst.com>"
2485d096f33d1b073230ff9f53c5b5ebf9c293b5,sashass1315,2025-08-11T10:48:38Z,"downloader: fix comment (#32382)

The previous comment stated that every 3rd block has a tx and every 5th
has an uncle.
The implementation actually adds one transaction to every second block
and does not add uncles.
Updated the comment to reflect the real behavior to avoid confusion when
reading tests."
6238effeff1ef0f20f4b57188d6c021d7393a6e8,cui,2025-08-11T10:05:06Z,"miner: remove todo comment (#32389)

see
https://github.com/ethereum/go-ethereum/pull/32372#discussion_r2265885182"
40072af04af3c967fb5d1358c334b9b005d9661a,cui,2025-08-11T07:00:11Z,core/vm: make types consistent in makeDup (#32378)
18b4ee5972b38f27c471d423ae9a14fae7dca29e,MozirDmitriy,2025-08-11T06:32:27Z,"ethdb/leveldb: check iterator error in Database.DeleteRange (#32384)

Add missing it.Error() check after iteration in Database.DeleteRange to
avoid silently ignoring iterator errors before writing the batch.

Aligns behavior with batch.DeleteRange, which already validates iterator
errors. No other functional changes; existing tests pass (TestLevelDB)."
8ba1c791bf62838bbb7fe73abdad832e374b15dc,kashitaka,2025-08-11T06:29:07Z,"ethclient: fix flaky pending tx test (#32380)

Fixes: https://github.com/ethereum/go-ethereum/issues/32252"
c3ef6c77c24956ebe1156205869259ffb8892486,Ömer Faruk Irmak,2025-08-07T22:01:41Z,"core/vm: fold EVMInterpreter into EVM (#32352)

The separation serves no purpose atm, and the circular dependency that
EVM and EVMInterpreter had was begging for them to be merged."
888b71b3cfa4a7daf152bae930a2afdf8edee6ce,cui,2025-08-07T18:03:30Z,"metrics: use atomic.Pointer in runtimeHistogram (#32361)

Co-authored-by: Felix Lange <fjl@twurst.com>"
f86870f5da77e2563fdb7151078be24c12fa2076,radik878,2025-08-07T14:31:02Z,eth/downloader: fix incomplete code comment  (#32354)
4e7bc2bdc89e1fa27d259ef3efe7a59d2d2142d2,cui,2025-08-07T13:58:27Z,"rlp: use reflect.TypeFor (#32317)


Co-authored-by: Felix Lange <fjl@twurst.com>"
bd6797eafa592472a5b6b495ed3a1a68c022f013,cui,2025-08-07T13:56:25Z,"signer/core/apitypes: simplify reflect []byte creation (#32315)


Co-authored-by: Felix Lange <fjl@twurst.com>"
e979438a55739169dc6ab2ca0f2da668888a76d6,cui,2025-08-07T13:03:18Z,p2p/enode: use atomic.Pointer in LocalNode (#32360)
f9f85d0227078397eb293579081ec98753f8e4c5,cui,2025-08-07T12:53:36Z,"core: use reflect.TypeFor (#32320)

https://github.com/golang/go/issues/60088"
2e3971aed1fbdfed9013611140d8afaf68eed8ff,cui,2025-08-07T12:36:20Z,beacon/merkle: use reflect.TypeFor (#32322)
ec97ac70851c81962a1b999e01b339a3348d6892,cui,2025-08-07T12:30:03Z,"common, common/hexutil: use reflect.TypeFor (#32321)"
dfde155541f82f4b8f3bf72ee507a12e716dde21,cui,2025-08-07T12:22:11Z,crypto/kzg4844: use reflect.TypeFor (#32319)
f49f3ec78086903b278559f29bf38124c02d825f,cui,2025-08-07T12:15:54Z,rpc: use reflect.TypeFor (#32316)
e7189b59871931cb15747db376ce7dcc595f7f9a,cui,2025-08-07T08:42:22Z,"go.mod: upgraded github.com/golang-jwt/jwt/v4 v4.5.1 => v4.5.2 (#32356)

https://pkg.go.dev/vuln/GO-2025-3553"
792de5d2e3b40837aadb65993e387bf5aa5bce9f,cui,2025-08-06T10:57:43Z,"core/filtermaps: remove unnecessary nil check and add cv2 lock (#32309)

Co-authored-by: zsfelfoldi <zsfelfoldi@gmail.com>"
59405c40d394552f1915caedd5f43d971c7ba1fd,Minhyuk Kim,2025-08-05T11:51:16Z,"eth/gasestimator: check ErrGasLimitTooHigh conditions (#32348)

This PR makes 2 changes to how
[EIP-7825](https://github.com/ethereum/go-ethereum/pull/31824) behaves.

When `eth_estimateGas` or `eth_createAccessList` is called without any
gas limit in the payload, geth will choose the block's gas limit or the
`RPCGasCap`, which can be larger than the `maxTxGas`.

When this happens for `estimateGas`, the gas estimation just errors out
and ends, when it should continue doing binary search to find the lowest
possible gas limit.

This PR will: 
- Add a check to see if `hi` is larger than `maxTxGas` and cap it to
`maxTxGas` if it's larger. And add a special case handling for gas
estimation execute when it errs with `ErrGasLimitTooHigh`

---------

Co-authored-by: Gary Rong <garyrong0905@gmail.com>"
e9dca3b1810054052a7186a4d3e9a3f52d25c3fe,maskpp,2025-08-05T05:07:45Z,"eth/catalyst: avoid load the same blob tx multi times (#32190)

- If all the `vhashes` are in the same `sidecar`, then it will load the
same blob tx many times. This PR aims to upgrade this.

---------

Co-authored-by: Gary Rong <garyrong0905@gmail.com>"
cf500264664c42c259be955961d54b385ffd5c02,Guillaume Ballet,2025-08-05T01:34:12Z,"core/state: introduce the TransitionState object (verkle transition part 1) (#31634)

This is the first part of #31532 

It maintains a series of conversion maker which are to be updated by the
conversion code (in a follow-up PR, this is a breakdown of a larger PR
to make things easier to review). They can be used in this way:

- During the conversion, by storing the conversion markers when the
block has been processed. This is meant to be written in a function that
isn't currently present, hence [this
TODO](https://github.com/ethereum/go-ethereum/pull/31634/files#diff-89272f61e115723833d498a0acbe59fa2286e3dc7276a676a7f7816f21e248b7R384).

Part of  https://github.com/ethereum/go-ethereum/issues/31583

---------

Signed-off-by: Guillaume Ballet <3272758+gballet@users.noreply.github.com>
Co-authored-by: Gary Rong <garyrong0905@gmail.com>"
073e7ec4b0e99aba1b1f16e3556e1f261a0136f4,rjl493456442,2025-08-04T14:24:38Z,version: begin v1.16.3 release cycle (#32345)
dd1ebac11757484575ee779381af32f29ce3fbe4,rjl493456442,2025-08-04T13:59:08Z,version: release v1.16.2 (#32343)
5ebd8032b91c305f16c44ab312bde0c373ad5e05,Felföldi Zsolt,2025-08-04T01:19:33Z,"beacon/params, core/filtermaps: update checkpoints (#32336)

This PR updates checkpoints for blsync and filtermaps."
5572f2ed229ff1f3aa0967e32af320a4b01be16d,VolodymyrBg,2025-08-01T16:30:48Z,"rlp/rlpgen: implement package renaming support (#31148)

This adds support for importing types from multiple identically-named
packages.

---------

Co-authored-by: Felix Lange <fjl@twurst.com>"
038ff766ff9f9d89c1593c75edeb101c0801a0a4,Ceyhun Onur,2025-08-01T15:14:30Z,"eth/filters: fix error when blockHash is used with fromBlock/toBlock (#31877)

This introduces an error when the filter has both `blockHash` and
`fromBlock`/`toBlock`, since these are mutually exclusive. Seems the
tests were actually returning `not found` error, which went undetected
since there was no check on the actual returned error in the test."
9c58810e717e7c48dff31ebc7280ba47675597a6,Tomás Andróil,2025-08-01T12:00:00Z,eth: fix typos and outdated comments (#32324)
17d65e9451111288d96f8fb6befb8544a94b6d50,lmittmann,2025-08-01T11:57:38Z,"core/vm: add configurable jumpdest analysis cache (#32143)

This adds a method on vm.EVM to set the jumpdest cache implementation.
It can be used to maintain an analysis cache across VM invocations, to improve
performance by skipping the analysis for already known contracts.

---------

Co-authored-by: lmittmann <lmittmann@users.noreply.github.com>
Co-authored-by: Felix Lange <fjl@twurst.com>"
23da91f73b83eb1d101889b2f773c6f0a80a8f15,rjl493456442,2025-08-01T02:23:23Z,"trie: reduce the memory allocation in trie hashing (#31902)

This pull request optimizes trie hashing by reducing memory allocation
overhead. Specifically:

- define a fullNodeEncoder pool to reuse encoders and avoid memory
allocations.

- simplify the encoding logic for shortNode and fullNode by getting rid
of the Go interfaces."
d4a3bf1b23e3972fb82e085c0e29fe2c4647ed5c,Felix Lange,2025-07-31T10:13:36Z,"cmd/devp2p/internal/v4test: add test for ENRRequest (#32303)

This adds a cross-client protocol test for a recently discovered bug in Nethermind."
4d9d72806ccd09ce0d452abf77dc77aa3413b972,cui,2025-07-31T01:53:31Z,accounts/abi: precompile regex (#32301)
0814d991aba32ce4f2a0253f1c06c2da22788408,cui,2025-07-31T01:48:31Z,common/hexutil: replace customized bit sizer with bit.Uintsize (#32304)
2d95ba7d15879677cb451bbaa5d2c34c2b4f323d,Daniel Katzan,2025-07-31T01:34:17Z,core/types: expose sigHash as Hash for SetCodeAuthorization (#32298)
d14d4d2af07090a22f8651366146e3f17e09ed6b,ericxtheodore,2025-07-30T02:39:03Z,core/state: improve PrettyPrint function (#32293)
a56558d0920b74b6553185de4aff79c3de534e01,maskpp,2025-07-29T05:36:30Z,"core/state: preallocate capacity for logs list (#32291)

Improvement: preallocate capacity for `logs` at first to avoid
reallocating multi times."
eb7aef45a73b3151b25a1174d6cddcd0cf2fee0c,kashitaka,2025-07-28T14:17:36Z,"ethclient/simulated: Fix flaky rollback test (#32280)

This PR addresses a flakiness in the rollback test discussed in
https://github.com/ethereum/go-ethereum/issues/32252

I found `nonce` collision caused transactions occasionally fail to send.
I tried to change error message in the failed test like:

```
	if err = client.SendTransaction(ctx, signedTx); err != nil {
		t.Fatalf(""failed to send transaction: %v, nonce: %d"", err, signedTx.Nonce())
	}
```

and I occasionally got test failure with this message:

```
=== CONT  TestFlakyFunction/Run_#100
    rollback_test.go:44: failed to send transaction: already known, nonce: 0
--- FAIL: TestFlakyFunction/Run_#100 (0.07s)
```

Although `nonces` are obtained via `PendingNonceAt`, we observed that,
in rare cases (approximately 1 in 1000), two transactions from the same
sender end up with the same nonce. This likely happens because `tx0` has
not yet propagated to the transaction pool before `tx1` requests its
nonce. When the test succeeds, `tx0` and `tx1` have nonces `0` and `1`,
respectively. However, in rare failures, both transactions end up with
nonce `0`.

We modified the test to explicitly assign nonces to each transaction. By
controlling the nonce values manually, we eliminated the race condition
and ensured consistent behavior. After several thousand runs, the
flakiness was no longer reproducible in my local environment.

Reduced internal polling interval in `pendingStateHasTx()` to speed up
test execution without impacting stability. It reduces test time for
`TestTransactionRollbackBehavior` from about 7 seconds to 2 seconds."
b64a5001635f7eefe91d9d90dfbf430a3906da7f,Tomás Andróil,2025-07-28T12:56:29Z,"downloader: fix typos, grammar and formatting (#32288)"
32d537cd588efe31e70ad3333cdaaed35f041a21,ericxtheodore,2025-07-28T08:13:18Z,"all: replace fmt.Errorf with errors.New (#32286)

The errors.new function does not require string formatting, so its
performance is better than that of fmt.Errorf."
a7aed7bd6f6504b49854a445f27b9cfb4a94df51,rjl493456442,2025-07-28T06:57:45Z,"cmd, eth, internal: introduce debug_sync (#32177)

Alternative implementation of https://github.com/ethereum/go-ethereum/pull/32159"
0fe1bc071727504beb288ee665eb6efbb01fc5c1,Galoretka,2025-07-28T01:16:47Z,"eth/catalyst: fix error message in ExecuteStatelessPayloadV4 (#32269)

Correct the error message in the ExecuteStatelessPayloadV4 function to
reference newPayloadV4 and the Prague fork, instead of incorrectly
referencing newPayloadV3 and Cancun. 

This improves clarity during debugging and aligns the error message with 
the actual function and fork being validated. No logic is changed.

---------

Co-authored-by: rjl493456442 <garyrong0905@gmail.com>"
29eebb5eac09adddca39dbf06d66dd321b69e0a7,nthumann,2025-07-28T01:13:50Z,"core: replace the empty fmt.Errorf with errors.New (#32274)

The `errors.new` function does not require string formatting, so its
performance is better than that of `fmt.Errorf`."
b369a855fbb93aca7928f7cdf8a5774305a5c6c0,Marius van der Wijden,2025-07-24T08:43:04Z,"eth/protocols/snap: add healing and syncing metrics (#32258)

Adds the heal time and snap sync time to grafana

---------

Co-authored-by: Gary Rong <garyrong0905@gmail.com>"
16117eb7cddc4584865af106d2332aa89f387d3d,Delweng,2025-07-23T07:12:55Z,"triedb/pathdb: fix an deadlock in history indexer (#32260)

Seems the `signal.result` was not sent back in shorten case, this will
cause a deadlock.

---------

Signed-off-by: jsvisa <delweng@gmail.com>
Co-authored-by: Gary Rong <garyrong0905@gmail.com>"
3b67602c4c5e701028c7246977aabff02cce643c,gzeon,2025-07-23T03:41:37Z,"eth/gasestimator: fix potential overflow (#32255)

Improve binary search, preventing the potential overflow in certain L2 cases"
a7efdcbf095fa043390c98439e6924b69ed3f80d,Micke,2025-07-22T21:06:48Z,"p2p/rlpx: optimize XOR operation using bitutil.XORBytes (#32217)

Replace manual byte-by-byte XOR implementation with the optimized
bitutil.XORBytes function. This improves performance by using word-sized
operations on supported architectures while maintaining the same
functionality. The optimized version processes data in bulk rather than
one byte at a time

---------

Co-authored-by: Felix Lange <fjl@twurst.com>"
264c06a72c8069ace8f2f2af3cf48b252bf0c9de,Delweng,2025-07-22T12:03:22Z,"triedb/pathdb:  use binary.append to eliminate the tmp scratch slice (#32250)

`binary.AppendUvarint` offers better performance than using append
directly, because it avoids unnecessary memory allocation and copying.

In our case, it can increase the performance by +35.8% for the
`blockWriter.append` function:

```
benchmark                        old ns/op     new ns/op     delta
BenchmarkBlockWriterAppend-8     5.97          3.83          -35.80%
```

---------

Signed-off-by: jsvisa <delweng@gmail.com>
Co-authored-by: Gary Rong <garyrong0905@gmail.com>"
83aa643621d893ad8f9edb29fd8eb698edc02d83,maskpp,2025-07-22T07:18:23Z,core/rawdb: downgrade log level in chain freezer (#32253)
b2a0e088087ad912b72468213a16cb887efe6124,maskpp,2025-07-22T07:03:48Z,core/types: minimize this invalid intermediate state (#32241)
36c87a220eee1dd9530d94b5bb7d77f20b38b7e5,Felix Lange,2025-07-21T21:20:36Z,build: update tests to fusaka-devnet-3 (#32251)
f96f82bd6bd6bf88a10c5160e97c04b3dcafcc61,Felix Lange,2025-07-21T14:26:24Z,"core, params: add limit for max blobs in blob transaction (#32246)

[EIP-7594](https://eips.ethereum.org/EIPS/eip-7594) defines a limit of
max 6 blobs per transaction. We need to enforce this limit during block
processing.

> Additionally, a limit of 6 blobs per transaction is introduced.
Clients MUST enforce this limit when validating blob transactions at
submission time, when received from the network, and during block
production and processing."
d80094f78898bf9b43b6d43c3b5bc6645fb9fe6f,Marius van der Wijden,2025-07-21T10:29:55Z,"core/vm: triple modexp cost post-cancun (#32231)

https://github.com/ethereum/EIPs/pull/9969/files"
f37fe6750f98c551091c774d08ec9bcd58852663,Delweng,2025-07-21T08:30:43Z,"triedb/pathdb: fix incorrect address length in history searching (#32248)

We should use account length to check address, else OOB maybe occured

Signed-off-by: jsvisa <delweng@gmail.com>"
f17df6db91c5dd504dcc746d3734ae612fbd9453,kourin,2025-07-18T10:36:10Z,"core/txpool/blobpool: remove unused `txValidationFn` from BlobPool (#32237)

This PR removes the now‑unused `txValidationFn` field from BlobPool.
It became obsolete after a PR  https://github.com/ethereum/go-ethereum/pull/31202 
was merged.

Resolves https://github.com/ethereum/go-ethereum/issues/32236"
b4b4068fe7414dc08a0e19fd880f3c54cd15d88b,Marius van der Wijden,2025-07-18T05:22:59Z,"params: update tx gas limit cap (#32230)

Updates the tx gas limit cap to the new parameter (2^24)
https://github.com/ethereum/EIPs/pull/9986/files"
0dacfef8ac42e7be5db26c2956f2b238ba7c75e8,rjl493456442,2025-07-17T03:19:20Z,"all: define constructor for BlobSidecar (#32213)

The main purpose of this change is to enforce the version setting when
constructing the blobSidecar, avoiding creating sidecar with wrong/default 
version tag."
a487729d83ece12482eb1e7caf4ab1889ca68315,Delweng,2025-07-17T03:07:22Z,"triedb/pathdb: improve the performance of parse index block (#32219)

The implementation of `parseIndexBlock` used a reverse loop with slice
appends to build the restart points, which was less cache-friendly and
involved unnecessary allocations and operations. In this PR we change
the implementation to read and validate the restart points in one single
forward loop.

Here is the benchmark test:

```bash
go test -benchmem -bench=BenchmarkParseIndexBlock ./triedb/pathdb/
```

The result as below:

```
benchmark                      old ns/op     new ns/op     delta
BenchmarkParseIndexBlock-8     52.9          37.5          -29.05%
```

about 29% improvements

---------

Signed-off-by: jsvisa <delweng@gmail.com>"
becca46010178249d79af7ef5c5ea0837f2f78ec,Zhou,2025-07-17T02:59:47Z,eth/protocols/snap: fix negative eta in state progress logging (#32225)
f36d349918926e53f62844e44bcb3257d97c11b7,Delweng,2025-07-17T02:44:35Z,triedb/pathdb: avoid duplicate metadata reads (#32226)
30e3a4918031775b64cf08d7b2d70345554b7d1e,shazam8253,2025-07-16T21:26:33Z,"eth/tracers: apply block header overrides correctly (#32183)

Fixes #32175.

This fixes the scenario where the blockhash opcode would return 0x0
during RPC simulations when using BlockOverrides with a future block
number. The root cause was that BlockOverrides.Apply() only modified the
vm.BlockContext, but GetHashFn() depends on the actual
types.Header.Number to resolve valid historical block hashes. This
caused a mismatch and resulted in incorrect behavior during trace and
call simulations.

---------

Co-authored-by: shantichanal <158101918+shantichanal@users.noreply.github.com>
Co-authored-by: lightclient <lightclient@protonmail.com>"
66df1f26b86ab2c433c802c25e2a0534871511fb,steven,2025-07-16T13:36:44Z,"account/abi/bind/v2: fix TestDeploymentWithOverrides (#32212)

The root cause of the flaky test was a nonce conflict caused by async
contract deployments.

This solution defines a custom deployer with automatic nonce management."
532a1c2ca499143bd56efb48322a3a41b5c51695,CertiK-Geth,2025-07-16T13:11:10Z,"eth/downloader: improve nil pointer protection (#32222)

Fix #32221

---------

Co-authored-by: rjl493456442 <garyrong0905@gmail.com>"
61d7279e1f13887b30335c89abdc8a947f0ae814,Ömer Faruk Irmak,2025-07-16T13:00:39Z,trie: avoid spawning goroutines for empty children (#32220)
e94123acc2bc8283764b26f3423f5e026515c0f4,Marius van der Wijden,2025-07-15T13:48:36Z,"core/rawdb: reduce allocations in rawdb.ReadHeaderNumber (#31913)

This is something interesting I came across during my benchmarks, we
spent ~3.8% of all allocations allocating the header number on the heap.

```
(pprof) list GetHeaderByHash
Total: 38197204475
ROUTINE ======================== github.com/ethereum/go-ethereum/core.(*BlockChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/blockchain_reader.go
         0 5786566117 (flat, cum) 15.15% of Total
         .          .     79:func (bc *BlockChain) GetHeaderByHash(hash common.Hash) *types.Header {
         . 5786566117     80: return bc.hc.GetHeaderByHash(hash)
         .          .     81:}
         .          .     82:
         .          .     83:// GetHeaderByNumber retrieves a block header from the database by number,
         .          .     84:// caching it (associated with its hash) if found.
         .          .     85:func (bc *BlockChain) GetHeaderByNumber(number uint64) *types.Header {
ROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetHeaderByHash in github.com/ethereum/go-ethereum/core/headerchain.go
         0 5786566117 (flat, cum) 15.15% of Total
         .          .    404:func (hc *HeaderChain) GetHeaderByHash(hash common.Hash) *types.Header {
         . 1471264309    405: number := hc.GetBlockNumber(hash)
         .          .    406: if number == nil {
         .          .    407:  return nil
         .          .    408: }
         . 4315301808    409: return hc.GetHeader(hash, *number)
         .          .    410:}
         .          .    411:
         .          .    412:// HasHeader checks if a block header is present in the database or not.
         .          .    413:// In theory, if header is present in the database, all relative components
         .          .    414:// like td and hash->number should be present too.
(pprof) list GetBlockNumber
Total: 38197204475
ROUTINE ======================== github.com/ethereum/go-ethereum/core.(*HeaderChain).GetBlockNumber in github.com/ethereum/go-ethereum/core/headerchain.go
  94438817 1471264309 (flat, cum)  3.85% of Total
         .          .    100:func (hc *HeaderChain) GetBlockNumber(hash common.Hash) *uint64 {
  94438817   94438817    101: if cached, ok := hc.numberCache.Get(hash); ok {
         .          .    102:  return &cached
         .          .    103: }
         . 1376270828    104: number := rawdb.ReadHeaderNumber(hc.chainDb, hash)
         .          .    105: if number != nil {
         .     554664    106:  hc.numberCache.Add(hash, *number)
         .          .    107: }
         .          .    108: return number
         .          .    109:}
         .          .    110:
         .          .    111:type headerWriteResult struct {
(pprof) list ReadHeaderNumber
Total: 38197204475
ROUTINE ======================== github.com/ethereum/go-ethereum/core/rawdb.ReadHeaderNumber in github.com/ethereum/go-ethereum/core/rawdb/accessors_chain.go
 204606513 1376270828 (flat, cum)  3.60% of Total
         .          .    146:func ReadHeaderNumber(db ethdb.KeyValueReader, hash common.Hash) *uint64 {
 109577863 1281242178    147: data, _ := db.Get(headerNumberKey(hash))
         .          .    148: if len(data) != 8 {
         .          .    149:  return nil
         .          .    150: }
  95028650   95028650    151: number := binary.BigEndian.Uint64(data)
         .          .    152: return &number
         .          .    153:}
         .          .    154:
         .          .    155:// WriteHeaderNumber stores the hash->number mapping.
         .          .    156:func WriteHeaderNumber(db ethdb.KeyValueWriter, hash common.Hash, number uint64) {
```

Opening this to discuss the idea, I know that rawdb.EmptyNumber is not a
great name for the variable, open to suggestions"
7fcb796f646fb0580e78c1cd5540a591adc75d52,Maxim Evtush,2025-07-15T12:24:17Z,"all: update dead wiki links (#32215)

---


**Description:**  
- Replaced outdated GitHub wiki links with current, official
documentation URLs.
- Removed links that redirect or are no longer relevant.
- Ensured all references point to up-to-date and reliable sources.


---"
d7db10ddbde2b1a80485e25808410a2a3b44b836,asamuj,2025-07-15T06:20:45Z,"eth/protocols/snap, p2p/discover: improve zero time checks (#32214)"
7364e63ef90f0dc4589d96a38e450dcfe7183caa,rjl493456442,2025-07-15T05:50:52Z,"core/rawdb: change the mechanism to schedule freezer sync (#32135)

This pull request slightly improves the freezer fsync mechanism by scheduling 
the Sync operation based on the number of uncommitted items and original
time interval.

Originally, freezer.Sync was triggered every 30 seconds, which worked well during
active chain synchronization. However, once the initial state sync is complete, 
the fixed interval causes Sync to be scheduled too frequently.

To address this, the scheduling logic has been improved to consider both the time 
interval and the number of uncommitted items. This additional condition helps 
avoid unnecessary Sync operations when the chain is idle."
17903fedf0374be940f1e75260a8eacbbef62d0a,Delweng,2025-07-15T03:45:20Z,"triedb/pathdb: introduce file-based state journal (#32060)

Introduce file-based state journal in path database, fixing
the Pebble restriction when the journal size exceeds 4GB.

---------

Signed-off-by: jsvisa <delweng@gmail.com>
Co-authored-by: Gary Rong <garyrong0905@gmail.com>"
fe0ae06c779bc62901dcd9f6fe8b1967409c1bf5,maskpp,2025-07-15T01:07:23Z,core/types: fix CellProofsAt method (#32198)
5bce990891435ff9881192cf52373bf93317b704,FT,2025-07-14T22:08:06Z,"all: fix outdated ethereum wiki json-rpc json-rpc doc links (#32209)

Replace outdated wiki reference with ethereum.org
documentation links"
1a5f399e301baf795d7d4c38d9a53ea5d7940a1b,maskpp,2025-07-14T14:06:57Z,"miner: set sidecar version when recomputing proofs (#32199)

- If the block number is `osaka` fork and needs to recompute some `blob
proofs` to `cell proofs`, here also needs to set version to `1`."
e9e12a97d27ccaa3a11b80f03b897a515ed44aa2,Bosul Mun,2025-07-14T13:33:24Z,"eth/fetcher: fix announcement drop logic (#32210)

This PR fixes an issue in the tx_fetcher DoS prevention logic where the
code keeps the overflow amount (`want - maxTxAnnounces`) instead of the
allowed amount (`maxTxAnnounces - used`). The specific changes are:

- Correct slice indexing in the announcement drop logic
- Extend the overflow test case to cover the inversion scenario"
a327ffe9b35289719ac3c484b7332584985b598a,Felix Lange,2025-07-14T12:07:43Z,"params: EIP-7892 - Blob Parameter Only Hardforks (#32193)

This is a resubmit of https://github.com/ethereum/go-ethereum/pull/31820
against the `master` branch.

---------

Co-authored-by: Marius van der Wijden <m.vanderwijden@live.de>
Co-authored-by: Gary Rong <garyrong0905@gmail.com>"
90a098904f552ee722b0d0d5eccb3500d90a85a8,Marius van der Wijden,2025-07-14T09:27:42Z,"ethclient/gethclient: remove race condition in tests (#32206)

alternative to https://github.com/ethereum/go-ethereum/pull/32200

The race condition is not happening yet, since there is only a single
call to `newTestBackend`, but there might be more in the future"
a9061cfd77a26634d459f824793335ea73be14da,kilavvy,2025-07-14T07:15:18Z,"accounts/keystore: update links to documenation (#32194)

---


**Description:**  
- Replaced outdated GitHub wiki links with the official Ethereum
documentation for Web3 Secret Storage.
- Updated references in `keystore.go` and `passphrase.go` for improved
accuracy and reliability.


---"
055e1e6291e8420eeec53a81664a36cddbc64246,maskpp,2025-07-14T07:07:47Z,"signer/core/apitypes: require blob txs to have tx.to set (#32197)

Check the `to` address before building the blob tx.

---------

Co-authored-by: jwasinger <j-wasinger@hotmail.com>"
